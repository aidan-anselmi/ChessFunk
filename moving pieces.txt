https://chess.stackexchange.com/questions/9706/representing-moves-found-via-bitboards-applying-them-and-removing-them


1. generate where a single piece can move
this is its attack board(at least for everything but pawns)

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 1 1 1 0 0
0 0 0 1 K 1 0 0
0 0 0 1 1 1 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0


2. To generate move seperate the board into single bits

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0
0 0 0 0 K 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 K 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

...

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 K 0 0 0
0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

3. & these boards with the starting board and that is how we will move


Big O analysis for knight on step 2 , i.e. how long will it take to seperate?
O(n) where n is the number of legal moves

to get msb of num do 
num & (num - 1) = msb

erase msb do
num & !msb = num_minus_msb

once we erase the msb iteritively get each move


0001001000

0001000111



idea: make function to calc O(n) analysis
reasons:
	time sensitive
	show knowledge
	good documentation
	leave room for improvement for edits/future engines








functions per piece:
	attack board uint_64
		capture board uint_64?
	move board vec<uint_64>



